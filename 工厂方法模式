#include <iostream>

using namespace std;

class Fruit
{
public:
	Fruit() {};
	~Fruit() {};
	virtual void getName() = 0;
private:

};

class AbstractFactory 
{
public:
	AbstractFactory() {};
	~AbstractFactory() {};
	virtual Fruit* createFruit() = 0;
private:
};

class Apple :public Fruit
{
public:
	Apple() {};
	~Apple() {};
	virtual void getName()
	{
		cout << "我是苹果" << endl;
	}
};

class Banana :public Fruit
{
public:
	Banana() {};
	~Banana() {};
	virtual void getName()
	{
		cout << "我是香蕉" << endl;
	}
};

class AppleFactory :public AbstractFactory
{
public:
	AppleFactory() {};
	~AppleFactory() {};
	virtual Fruit* createFruit()
	{
		return new Apple;
	}
};

class BananaFactory :public AbstractFactory
{
public:
	BananaFactory() {};
	~BananaFactory() {};
	virtual Fruit* createFruit()
	{
		return new Banana;
	}
};

class Pear :public Fruit
{
public:
	Pear() {};
	~Pear() {};
	virtual void getName()
	{
		cout << "我是鸭梨" << endl;
	}
};

class PearFactory :public AbstractFactory
{
public:
	PearFactory() {};
	~PearFactory() {};
	virtual Fruit* createFruit()
	{
		return new Pear;
	}
};


int main()
{
	AbstractFactory *abFactory = nullptr;
	Fruit *fruit = nullptr;

	abFactory = new AppleFactory;
	fruit = abFactory->createFruit();
	fruit->getName();
	delete abFactory;
	delete fruit;

	abFactory = new BananaFactory;
	fruit = abFactory->createFruit();
	fruit->getName();
	delete abFactory;
	delete fruit;

	abFactory = new PearFactory;
	fruit = abFactory->createFruit();
	fruit->getName();
	delete abFactory;
	delete fruit;

	cin.get();
	return 0;
}
